swagger: "2.0"
info:
  description: "This is the full description of bug-manager core-api"
  version: "1.0.0"
  title: "Bug Manager Core-api"
host: "bug-manager.io"
basePath: "/v1"
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
tags:
  - name: "auth"
    description: "Operations about auhtentication"
  - name: "users"
    description: "Operations about user"
  - name: "projects"
    description: "Operations about project"
  - name : "issues"
    description: "Operations about issues"
  - name : "tags"
    description : "Operation about tags"
  - name : "status"
    description : "Operation about status"
  - name : "comments"
    description : "Operation about comments"
schemes:
  - "https"
  - "http"
paths:
  /auth:
      post:
        tags:
          - "auth"
        summary: "Logs user into the system"
        operationId: "authentication"
        parameters:
          - in: "body"
            name: "auth"
            description: "data for authentication"
            required: true
            schema: 
              $ref : "#/definitions/Auth"
        responses:
          "200":
            description : "logging in"
          default:
            description: "error"
  /users:
    get: 
      tags :
        - "users"
      summary : "Get all users"
      operationId: "getUsers"
      responses:
        "200" : 
          description : "getting all users"
          schema : 
            type : "array"
            items :
              $ref : "#/definitions/User"
        default :
          description : "error"
    post:
      tags:
        - "users"
      summary: "Create user"
      operationId: "addUser"
      parameters:
        - in: "body"
          name: "user"
          description: "User object that need to be add"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200" : 
          description : "creating user"
        default :
          description : "error"
  /users/{userId}:
    get:
      tags:
        - "users"
      summary: "Get user by ID"
      operationId: "getUserById"
      parameters:
        - in: "path"
          name: "userId"
          description: "The user that needs to be fetched"
          required: true
          type: "string"
      responses:
        "200": 
          description : "getting user"
        default:
          description: "error"
    put:
      tags:
        - "users"
      summary: "Update user by ID"
      operationId: "updateUserById"
      parameters:
        - in: "path"
          name: "userId"
          description: "user that need to be update"
          required: true
          type: "string"
        - in: "body"
          name: "user"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description : "updating user"
        default:
          description: "error"
    patch:
      tags:
        - "users"
      summary: "Modify user"
      operationId: "modifyUser"
      parameters:
        - in: "path"
          name: "userId"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name : "user"
          description : "elements that need to be patch"
          required : true
          schema :
            type : "object"
            properties:
              email :
                type : "string"
              password : 
                type : "string"
              name : 
                type: "string"
              role :
                type : "string"
                enum : ["admin","user"]
      responses:
        "200" :
          description : "patching user"
        default:
          description: "error"
    delete:
      tags:
        - "users"
      summary: "Delete user"
      operationId: "deleteUser"
      parameters:
        - in: "path"
          name: "userId"
          description: "The user that needs to be deleted"
          required: true
          type: "string"
      responses:
        "200":
          description : "deleting user"
        default:
          description: "error"
  /users/self:
    get :
      tags :
        - "users"
      summary: "Get current user"
      operationId: "getCurrentUser"
      responses:
        "200" :
          description : "getting current user"
        default:
          description : "error"
  /projects:
    get : 
      tags :
        - "projects"
      summary : "Get project"
      operationId : "getProject"
      responses :
        "200":
          description : "getting all projects"
        default:
          description : "error"
    post : 
      tags :
        - "projects"
      summary : " Create project"
      operationId: "createProject"
      parameters : 
        - in : "body"
          name : "project"
          description : "project object that need to be add"
          required : true
          schema : 
            $ref : "#/definitions/Project"
      responses:
        "200":
          description : "creating project"
        default:
          description : "error"
  /projects/{projectId}:
    get:
      tags:
        - "projects"
      summary : "Get project by ID"
      operationId : "getProjectById"
      parameters:
        - in: "path"
          name: "projectId"
          description: "the project that need to be fetched"
          required: true
          type: "string"
      responses: 
        "200" :
          description : "getting project"
        default:
          description : "succesful operation"
    put:
      tags:
        - "projects"
      summary : "Update project by ID"
      operationId : "updateProjectById"
      parameters:
        - in: "path"
          name: "projectId"
          description: "the project that need to be update"
          required: true
          type: "string"
        - in: "body"
          name: "project"
          description: "updated project"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "200":
          description : "updating project"
        default:
          description : "error"
    patch :
      tags :
        - projects
      summary : "Patch project by ID"
      operationId : "patchProjectById"
      parameters :
        - in : "path"
          name : "projectId"
          description : "the project that need to be patch"
          required : true
          type : "string"
        - in : "body"
          name : "project"
          description : "patched project"
          required : true
          schema : 
            type : "object"
            properties :
              title : 
                type : "string"
              description : 
                type : "string"
      responses : 
        "200" :
          description : "patching project"
        default : 
          description : "error"
    delete :
      tags :
        - projects
      summary : "Delete project by ID"
      operationId : "deleteProjectById"
      parameters :
        - in : "path"
          name : "projectId"
          description : "the project that need to be delete"
          required : true
          type : "string"
      responses: 
        "200":
          description : "deleting project"
        default: 
          description : "error"
  /projects/{projectId}/issues:
    get:
      tags:
        - "projects"
      summary : "Get issues by project"
      operationId : "getIssuesByProject"
      parameters:
        - in: "path"
          name: "projectId"
          description: "the project ID"
          required: true
          type: "string"
      responses: 
        "200" :
          description : "getting issues by project"
        default:
          description : "error"
  /issues:
    get:
      tags:
        - "issues"
      summary : "Get all issues"
      operationId : "getIssues"
      responses:
        "200" : 
          description : "getting all issues"
        default:
          description : "successful operation"
    post :
      tags :
        - "issues"
      summary : "Create issue"
      operationId : "createIssue"
      parameters: 
        - in : "body"
          name : "issue"
          description : "issue that need to be add"
          required : true
          schema :
            $ref : "#/definitions/Issue"
      responses : 
        "200":
          description : "Creating issue"
        default : 
          description : "error"
  /issues/{issueId}:
    get:
      tags:
        - "issues"
      summary : "Get issues by id"
      operationId : "getIssuesById"
      parameters : 
        - in : "path"
          name : "issueId"
          description : "The issue that need to be fetched"
          required : true
          type : "string"
      responses:
        "200" :
          description : "getting issue"
        default:
          description : "error"
    put:
      tags:
        - "issues"
      summary : "update issues by id"
      operationId : "updateIssuesById"
      parameters : 
        - in : "path"
          name : "issueId"
          description : "The issue that need to be updated"
          required : true
          type : "string"
        - in : "body"
          name : "body"
          description : "the updated issue"
          required : true
          schema : 
            $ref : "#/definitions/Issue"
      responses: 
        "200" :
          description : "updating issue"
        default:
          description : "error"
    patch:
      tags :
        - "issues"
      summary : "patch issue by Id"
      operationId: "patchIssueById"
      parameters : 
        - in : "path"
          name : "issueId"
          description : "The issue that need to be fetched"
          required : true
          type : "string"
        - in : "body"
          name : "issue"
          description : "the patched issues"
          required : true
          schema :
            type : "object"
            properties : 
              title:
                type : "string"
              content:
                type : "string"
              attachments:
                type : "array"
                items :
                  type : "string"
              creatorId :
                type : "number"
              assignedUserIds:
                type : "number"
              tagsId : 
                type : "number"
              projectId : 
                type : "number"
      responses :
        "200": 
          description : "patching issue"
        default : 
          description : "error"
    delete:
      tags : 
        - issues
      summary : "delete issue by Id"
      operationId : "deleteIssueById"
      parameters:
        - in : "path"
          name : "issueId"
          description : "The issue that need to be deleted"
          required : true
          type : "string"
      responses :   
        "200" : 
          description : "deleting user"
        default :
          description : "error"
  /issues/findByTags:
    post:
      tags : 
        - "issues"
      summary : "Get issues by tag"
      operationId : "getIssuesByTag"
      parameters : 
        - in : "body"
          name : "tag"
          required : true
          schema : 
            $ref : "#/definitions/Tag"
      responses:
        "200" :
          description : "getting issues by tag"
        default :
          description : "error"
  /issues/findByStatus:
    post:
      tags : 
        - "issues"
      summary : "Get issues by status"
      operationId : "getIssuesByStatus"
      parameters : 
        - in : "body"
          name : "body"
          required : true
          schema : 
            $ref : "#/definitions/Status"
      responses:
        "200" : 
          description : "getting issues by status"
        default :
          description : "error"
  /tags:
    get:
      tags : 
        - "tags"
      summary : "Get tags"
      operationId : "getTags"
      responses:
        "200":
          description : "getting all tags"
        default :
          description : "successful opearion"
    post:
      tags : 
        - "tags"
      summary : "Create tag"
      operationId : "createTag"
      parameters : 
        - in : "body"
          name : "tag"
          description : "tag that need to be create"
          required : true
          schema :
            $ref : "#/definitions/Tag"
      responses:
        "200":
          description : "creating tag"
        default :
          description : "error"
  /status:
    get:
      tags : 
        - "status"
      summary : "Get all status"
      operationId : "getStatus"
      responses:
        "200" : 
          description : "getting status"
        default:
          description : "error"
    post:
      tags:
        - "status"
      summary: "Create status"
      operationId : "createStatus"
      parameters :
        - in : "body"
          name : "status"
          description : "status that need to be create"
          required : true
          schema :
            $ref : "#/definitions/Status"
      responses : 
        "200":
          description : "creating status"
        default :
          description : "Successful operation"
  /comment :
    get:
      tags : 
        - "comments"
      summary : "Get all comments"
      operationId : "getComments"
      responses : 
        "200":
          description : "getting comments"
        default : 
          description : "error"
    post:
      tags : 
        - "comments"
      summary : "Create comment"
      operationId : "createComment"
      parameters : 
        - in : "body"
          name : "comment"
          description : "Comment that need to be create"
          required : true
          schema : 
            $ref : "#/definitions/Comment"
      responses : 
        "200" : 
          description : "creating comment"
        default : 
          description : "error"
  /comment/{commentId} : 
    get :
      tags : 
        - "comments"
      summary : "get comment by ID"
      operationId : "getCommentById"
      parameters : 
        - in : "path"
          name : "commentId"
          description : "comment that need to be update"
          required : true
          type: "string"
      responses : 
        "200" : 
          description : "getting comment"
        default : 
          description : "Successful operation"
    put :
      tags : 
        - "comments"
      summary : "Update comments"
      operationId : "updateComment"
      parameters : 
        - in : "path"
          name : "commentId"
          description : "comment that need to be update"
          required : true
          type: "string"
        - in : "body"
          name : "comment"
          description : "updated comment"
          required : true
          schema : 
            $ref : "#/definitions/Comment"
      responses : 
        "200" : 
          description : "updating comment"
        default : 
          description : "Successful operation"
    patch :
      tags : 
        - "comments"
      summary : "Modify comments"
      operationId : "modifyComment"
      parameters :
        - in : "path"
          name : "commentId"
          description : "comment that need to be patch"
          required : true
          type: "string"
        - in : "body"
          name : "comment"
          description : "patcheed comment"
          required : true
          schema : 
            type : "object"
            properties :
              userId:
                type : "string"
              issueId : 
                type : "string"
              content:
                type : "string"
      responses : 
        default : 
          description : "Successful operation"
    delete :
      tags :
        - comments
      summary : "delete comment"
      operationId : "deleteComment"
      parameters :
        - in : "path"
          name : "commentId"
          description : "comment that need to be delete"
          required : true
          type: "string"
      responses :
        "200":
          description : "deleting comment"
        default:
          description : "error"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "number"
      email:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      role:
        type: "string"
        enum: [admin, user]
    xml:
      name: "User"
  Project:
    type: "object"
    properties: 
      id:
        type: "number"
      title:
        type: "string"
      description :
        type : "string"
  Issue:
    type: "object"
    properties:
      id : 
        type : "number"
      title : 
        type : "string"
      content :
        type : "string"
      attachments :
        type : "string"
      creatorId:
        type: "object"
      assignedUserId:
        type : "object"
      tagsIds:
        type : "object"
      projectId:
        type : "object"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      color:
        type: "string"
    xml:
      name: "Tag"
  Status:
    type : "object"
    properties:
      id :
        type : "number"
      title : 
        type : "string"
      description : 
        type : "string"
  Comment:
    type : "object"
    properties:
      id : 
        type : "number"
      userId : 
        type : "number"
      issueId:
        type : "number"
      content : 
        type : "string"
  Action:
    type : "object"
    properties:
      id:
        type: "number"
      userId :
        type : "number"
      issueId :
        type : "number"
      type : 
        type: "string"
      data :
        type : "object"
  Auth:
    type : "object"
    properties:
      login:
        type : "string"
      mdp : 
        type : "string"
externalDocs:
  description: "Find out more about bug-manager"
  url: "http://bug-manager.io"
