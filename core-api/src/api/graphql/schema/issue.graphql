scalar Date
scalar PositiveInt

type Issue {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  title: String!
  open: Boolean!
  creator: User!
  status: Status
  assignedUsers: [User!]!
  tags: [Tag!]!
  project: Project
  changes: [Change!]!
  comments: [Comment!]!
}

type IssueCursor {
  edges: [Issue!]!
  pageInfo: PageInfo!
}

input IssueFilter {
  title: String
  open: Boolean
}

type IssueStatistics {
  openCount: Int,
  closedCount: Int,
}

type Query {
  issue(id: ID!): Issue!
  issues(after: String, first: PositiveInt, filters: IssueFilter): IssueCursor
  issuesStatistics: IssueStatistics!
}

type Mutation {
  createIssue(title: String!, content: String!): Issue!
  updateIssue(id: ID!, title: String): Issue!
  assignUser(id: ID!, userId: ID!): Issue!
  unassignUser(id: ID!, userId: ID!): Issue!
  addTag(id: ID!, tagId: ID!): Issue!
  removeTag(id: ID!, tagId: ID!): Issue!
  attachToProject(id: ID!, projectId: ID!): Issue!
  detatchFromProject(id: ID!, projectId: ID!): Issue!
  updateIssueStatus(id: ID!, statusId: ID!): Issue!
  closeIssue(id: ID!): Issue!
  reopenIssue(id: ID!): Issue!
  deleteIssue(id: ID!): Boolean!
}
